{
	"info": {
		"_postman_id": "44768c2c-db66-4990-85f7-7ec4bb01d408",
		"name": "simple-tracker-api",
		"description": "This API allows management of client contracts and tracks history of employee contract assignments\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26276122"
	},
	"item": [
		{
			"name": "employees",
			"item": [
				{
					"name": "Create new employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"pm.variables.set(\"employee_id\", res.id)",
									"pm.variables.set(\"employee_name\", req.name)",
									"pm.variables.set(\"employee_github\", req.github)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, github, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"github\");",
									"});",
									"",
									"pm.test(\"response should have correct name and github user\", function() {",
									"    pm.expect(res).to.have.property(\"name\", req.name)",
									"    pm.expect(res).to.have.property(\"github\", req.github)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Lorem ipsum dolor sit amet\",\n  \"github\": \"deserunt mollit anim id est laborum\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Add a new employee with given name and github username"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/employees",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Get new employee by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"employee_id\")",
									"let name = pm.variables.get(\"employee_name\")",
									"let github = pm.variables.get(\"employee_github\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, github, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"github\");",
									"});",
									"",
									"pm.test(\"response should have correct id name and github user\", function() {",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"    pm.expect(res).to.have.property(\"name\", name)",
									"    pm.expect(res).to.have.property(\"github\", github)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Get all employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"employee_id\")",
									"let name = pm.variables.get(\"employee_name\")",
									"let github = pm.variables.get(\"employee_github\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test user\", function () {",
									"    let user = res.filter(employee=> employee?.id == id)[0]",
									"    pm.expect(user, \"get all response missing test user\").to.exist",
									"    pm.expect(user).to.have.property(\"id\", id)",
									"    pm.expect(user).to.have.property(\"name\", name)",
									"    pm.expect(user).to.have.property(\"github\", github)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Retrieves all employees"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -6280281,\n    \"name\": \"aliquip nisi proident exercitation\",\n    \"github\": \"sunt eiusmod ipsum veniam\"\n  },\n  {\n    \"id\": 50533926,\n    \"name\": \"pariatur labore\",\n    \"github\": \"et dolore nisi sunt\"\n  }\n]"
						}
					]
				},
				{
					"name": "Update employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"let id = pm.variables.get(\"employee_id\")",
									"pm.variables.set(\"employee_name\", req.name)",
									"pm.variables.set(\"employee_github\", req.github)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, github, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"github\");",
									"});",
									"",
									"pm.test(\"response should have updated name and github user\", function() {",
									"    pm.expect(res).to.have.property(\"name\", req.name)",
									"    pm.expect(res).to.have.property(\"github\", req.github)",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Illegal update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -1,\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Get updated employee by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"employee_id\")",
									"let name = pm.variables.get(\"employee_name\")",
									"let github = pm.variables.get(\"employee_github\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, github, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"github\");",
									"});",
									"",
									"pm.test(\"response should have correct id name and github user\", function() {",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"    pm.expect(res).to.have.property(\"name\", name)",
									"    pm.expect(res).to.have.property(\"github\", github)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Get all employees post update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"employee_id\")",
									"let name = pm.variables.get(\"employee_name\")",
									"let github = pm.variables.get(\"employee_github\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test user\", function () {",
									"    let user = res.filter(employee=> employee?.id == id)[0]",
									"    pm.expect(user, \"get all response missing test user\").to.exist",
									"    pm.expect(user).to.have.property(\"id\", id)",
									"    pm.expect(user).to.have.property(\"name\", name)",
									"    pm.expect(user).to.have.property(\"github\", github)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Retrieves all employees"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -6280281,\n    \"name\": \"aliquip nisi proident exercitation\",\n    \"github\": \"sunt eiusmod ipsum veniam\"\n  },\n  {\n    \"id\": 50533926,\n    \"name\": \"pariatur labore\",\n    \"github\": \"et dolore nisi sunt\"\n  }\n]"
						}
					]
				},
				{
					"name": "Delete employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must have OK status\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get employee by ID post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Get all employees post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"employee_id\")",
									"let name = pm.variables.get(\"employee_name\")",
									"let github = pm.variables.get(\"employee_github\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must not contain test user\", function () {",
									"    let user = res.filter(employee => employee?.id == id)[0]",
									"    pm.expect(user, \"get all response contains test user after deletion\").to.be.undefined",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Retrieves all employees"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -6280281,\n    \"name\": \"aliquip nisi proident exercitation\",\n    \"github\": \"sunt eiusmod ipsum veniam\"\n  },\n  {\n    \"id\": 50533926,\n    \"name\": \"pariatur labore\",\n    \"github\": \"et dolore nisi sunt\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create bad employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"github\": \"deserunt mollit anim id est laborum\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Add a new employee with given name and github username"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/employees",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Update missing employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "-1",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Delete missing employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "-1",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "clients",
			"item": [
				{
					"name": "Create new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"pm.variables.set(\"client_id\", res.id)",
									"pm.variables.set(\"client_name\", req.name)",
									"pm.variables.set(\"client_url\", req.url)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, url, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"url\");",
									"});",
									"",
									"pm.test(\"response should have correct name and url\", function() {",
									"    pm.expect(res).to.have.property(\"name\", req.name)",
									"    pm.expect(res).to.have.property(\"url\", req.url)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Add a new client with given name and url"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Get new client by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"client_id\")",
									"let name = pm.variables.get(\"client_name\")",
									"let url = pm.variables.get(\"client_url\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, url, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"url\");",
									"});",
									"",
									"pm.test(\"response should have correct id name and url\", function() {",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"    pm.expect(res).to.have.property(\"name\", name)",
									"    pm.expect(res).to.have.property(\"url\", url)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Get all clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"client_id\")",
									"let name = pm.variables.get(\"client_name\")",
									"let url = pm.variables.get(\"client_url\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test user\", function () {",
									"    let user = res.filter(client=> client?.id == id)[0]",
									"    pm.expect(user, \"get all response missing test user\").to.exist",
									"    pm.expect(user).to.have.property(\"id\", id)",
									"    pm.expect(user).to.have.property(\"name\", name)",
									"    pm.expect(user).to.have.property(\"url\", url)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Retrieves all clients"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -80293844,\n    \"name\": \"tempor incididunt cupidatat\",\n    \"url\": \"sint incididunt dolore aliqua\"\n  },\n  {\n    \"id\": 35279027,\n    \"name\": \"laboris\",\n    \"url\": \"non ipsum commodo i\"\n  }\n]"
						}
					]
				},
				{
					"name": "Update client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"let id = pm.variables.get(\"client_id\")",
									"pm.variables.set(\"client_name\", req.name)",
									"pm.variables.set(\"client_url\", req.url)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, url, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"url\");",
									"});",
									"",
									"pm.test(\"response should have updated name and url\", function() {",
									"    pm.expect(res).to.have.property(\"name\", req.name)",
									"    pm.expect(res).to.have.property(\"url\", req.url)",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Illegal update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Get updated client by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"client_id\")",
									"let name = pm.variables.get(\"client_name\")",
									"let url = pm.variables.get(\"client_url\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain name, url, and id fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"name\", \"url\");",
									"});",
									"",
									"pm.test(\"response should have correct id name and url\", function() {",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"    pm.expect(res).to.have.property(\"name\", name)",
									"    pm.expect(res).to.have.property(\"url\", url)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Get all clients post update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"client_id\")",
									"let name = pm.variables.get(\"client_name\")",
									"let url = pm.variables.get(\"client_url\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test user\", function () {",
									"    let user = res.filter(client=> client?.id == id)[0]",
									"    pm.expect(user, \"get all response missing test user\").to.exist",
									"    pm.expect(user).to.have.property(\"id\", id)",
									"    pm.expect(user).to.have.property(\"name\", name)",
									"    pm.expect(user).to.have.property(\"url\", url)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Retrieves all clients"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -80293844,\n    \"name\": \"tempor incididunt cupidatat\",\n    \"url\": \"sint incididunt dolore aliqua\"\n  },\n  {\n    \"id\": 35279027,\n    \"name\": \"laboris\",\n    \"url\": \"non ipsum commodo i\"\n  }\n]"
						}
					]
				},
				{
					"name": "Delete a client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must have OK status\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get client by ID post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Get all clients post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"client_id\")",
									"let name = pm.variables.get(\"client_name\")",
									"let url = pm.variables.get(\"client_url\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must not contain test user\", function () {",
									"    let user = res.filter(client => client?.id == id)[0]",
									"    pm.expect(user, \"get all response contains test user after deletion\").to.be.undefined",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Retrieves all clients"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -80293844,\n    \"name\": \"tempor incididunt cupidatat\",\n    \"url\": \"sint incididunt dolore aliqua\"\n  },\n  {\n    \"id\": 35279027,\n    \"name\": \"laboris\",\n    \"url\": \"non ipsum commodo i\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create bad client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"elit est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Add a new client with given name and url"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Update missing client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "-1",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Delete missing client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "-1",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "contracts",
			"item": [
				{
					"name": "Create new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"pm.variables.set(\"client_id\", res.id)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Add a new client with given name and url"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Create new contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"pm.variables.set(\"contract_id\", res.id)",
									"pm.variables.set(\"client_id\", req.clientId)",
									"pm.variables.set(\"contract_type\", req.type)",
									"pm.variables.set(\"contract_start\", req.startDate)",
									"pm.variables.set(\"contract_end\", req.endDate)",
									"pm.variables.set(\"contract_tech\", req.tech)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain type, id, clientId, tech list, start and end dates\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"type\", \"startDate\", \"endDate\", \"tech\");",
									"});",
									"",
									"pm.test(\"response should have correct property values\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", req.clientId)",
									"    pm.expect(res).to.have.property(\"type\", req.type)",
									"    pm.expect(res).to.have.property(\"startDate\", req.startDate)",
									"    pm.expect(res).to.have.property(\"endDate\", req.endDate)",
									"    res.tech.forEach((e,i) => {",
									"        pm.expect(e).to.equal(req.tech[i])",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{client_id}},\n  \"type\": \"cillum ut\",\n  \"startDate\": \"sunt in sed veniam\",\n  \"endDate\": \"adipisicing aliquip enim\",\n  \"tech\": [\n    \"eiusmod ullamco sunt laboris\",\n    \"do sed officia mollit\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts"
							]
						},
						"description": "Add a new contract with fields"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Get new contract by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let type = pm.variables.get(\"contract_type\")",
									"let start = pm.variables.get(\"contract_start\")",
									"let end = pm.variables.get(\"contract_end\")",
									"let tech = pm.variables.get(\"contract_tech\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain type, id, clientId, tech list, start and end dates\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"type\", \"startDate\", \"endDate\", \"tech\");",
									"});",
									"",
									"pm.test(\"response should have correct property values\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", clientId)",
									"    pm.expect(res).to.have.property(\"type\", type)",
									"    pm.expect(res).to.have.property(\"startDate\", start)",
									"    pm.expect(res).to.have.property(\"endDate\", end)",
									"    res.tech.forEach((e,i) => {",
									"        pm.expect(e).to.equal(tech[i])",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Get all contracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let type = pm.variables.get(\"contract_type\")",
									"let start = pm.variables.get(\"contract_start\")",
									"let end = pm.variables.get(\"contract_end\")",
									"let tech = pm.variables.get(\"contract_tech\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test contract\", function () {",
									"    let contract = res.filter(contract=> contract?.id == id)[0]",
									"    pm.expect(contract, \"get all response missing test user\").to.exist",
									"    pm.expect(contract).to.have.property(\"clientId\", clientId)",
									"    pm.expect(contract).to.have.property(\"type\", type)",
									"    pm.expect(contract).to.have.property(\"startDate\", start)",
									"    pm.expect(contract).to.have.property(\"endDate\", end)",
									"    contract.tech.forEach((e,i) => {",
									"        pm.expect(e).to.equal(tech[i])",
									"    })",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts"
							]
						},
						"description": "Retrieves all contracts"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -68724914,\n    \"clientId\": -69642187,\n    \"type\": \"officia ven\",\n    \"startDate\": \"nostrud tempor Ut\",\n    \"endDate\": \"reprehenderit aliquip dolore officia ut\",\n    \"tech\": [\n      \"est dolore\",\n      \"consequat dolore\"\n    ]\n  },\n  {\n    \"id\": 13558934,\n    \"clientId\": -75032336,\n    \"type\": \"est\",\n    \"startDate\": \"aliqua ex\",\n    \"endDate\": \"elit\",\n    \"tech\": [\n      \"aliquip\",\n      \"Ut sint\"\n    ]\n  }\n]"
						}
					]
				},
				{
					"name": "Illegal update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -1,\n  \"clientId\": -1,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Update a contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"let id = pm.variables.get(\"contract_id\")",
									"pm.variables.set(\"contract_name\", req.name)",
									"pm.variables.set(\"contract_url\", req.url)",
									"pm.variables.set(\"client_id\", req.clientId)",
									"pm.variables.set(\"contract_type\", req.type)",
									"pm.variables.set(\"contract_start\", req.startDate)",
									"pm.variables.set(\"contract_end\", req.endDate)",
									"pm.variables.set(\"contract_tech\", req.tech)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain type, id, clientId, tech list, start and end dates\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"type\", \"startDate\", \"endDate\", \"tech\");",
									"});",
									"",
									"pm.test(\"response should have updated name and url\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", req.clientId)",
									"    pm.expect(res).to.have.property(\"type\", req.type)",
									"    pm.expect(res).to.have.property(\"startDate\", req.startDate)",
									"    pm.expect(res).to.have.property(\"endDate\", req.endDate)",
									"    res.tech.forEach((e,i) => {",
									"        pm.expect(e).to.equal(req.tech[i])",
									"    })",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Get updated contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let type = pm.variables.get(\"contract_type\")",
									"let start = pm.variables.get(\"contract_start\")",
									"let end = pm.variables.get(\"contract_end\")",
									"let tech = pm.variables.get(\"contract_tech\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain type, id, clientId, tech list, start and end dates\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"type\", \"startDate\", \"endDate\", \"tech\");",
									"});",
									"",
									"pm.test(\"response should have correct property values\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", clientId)",
									"    pm.expect(res).to.have.property(\"type\", type)",
									"    pm.expect(res).to.have.property(\"startDate\", start)",
									"    pm.expect(res).to.have.property(\"endDate\", end)",
									"    res.tech.forEach((e,i) => {",
									"        pm.expect(e).to.equal(tech[i])",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Get all contracts post update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let type = pm.variables.get(\"contract_type\")",
									"let start = pm.variables.get(\"contract_start\")",
									"let end = pm.variables.get(\"contract_end\")",
									"let tech = pm.variables.get(\"contract_tech\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test contract\", function () {",
									"    let contract = res.filter(contract=> contract?.id == id)[0]",
									"    pm.expect(contract, \"get all response missing test user\").to.exist",
									"    pm.expect(contract).to.have.property(\"clientId\", clientId)",
									"    pm.expect(contract).to.have.property(\"type\", type)",
									"    pm.expect(contract).to.have.property(\"startDate\", start)",
									"    pm.expect(contract).to.have.property(\"endDate\", end)",
									"    contract.tech.forEach((e,i) => {",
									"        pm.expect(e).to.equal(tech[i])",
									"    })",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts"
							]
						},
						"description": "Retrieves all contracts"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -68724914,\n    \"clientId\": -69642187,\n    \"type\": \"officia ven\",\n    \"startDate\": \"nostrud tempor Ut\",\n    \"endDate\": \"reprehenderit aliquip dolore officia ut\",\n    \"tech\": [\n      \"est dolore\",\n      \"consequat dolore\"\n    ]\n  },\n  {\n    \"id\": 13558934,\n    \"clientId\": -75032336,\n    \"type\": \"est\",\n    \"startDate\": \"aliqua ex\",\n    \"endDate\": \"elit\",\n    \"tech\": [\n      \"aliquip\",\n      \"Ut sint\"\n    ]\n  }\n]"
						}
					]
				},
				{
					"name": "Delete a contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must have OK status\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get contract by ID post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "-10462160",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Get all contracts post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"contract_id\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must not contain test contract\", function () {",
									"    let contract = res.filter(contract => contract?.id == id)[0]",
									"    pm.expect(contract, \"get all response contains test user after deletion\").to.be.undefined",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts"
							]
						},
						"description": "Retrieves all contracts"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -68724914,\n    \"clientId\": -69642187,\n    \"type\": \"officia ven\",\n    \"startDate\": \"nostrud tempor Ut\",\n    \"endDate\": \"reprehenderit aliquip dolore officia ut\",\n    \"tech\": [\n      \"est dolore\",\n      \"consequat dolore\"\n    ]\n  },\n  {\n    \"id\": 13558934,\n    \"clientId\": -75032336,\n    \"type\": \"est\",\n    \"startDate\": \"aliqua ex\",\n    \"endDate\": \"elit\",\n    \"tech\": [\n      \"aliquip\",\n      \"Ut sint\"\n    ]\n  }\n]"
						}
					]
				},
				{
					"name": "Create bad contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": -1,\n  \"type\": \"cillum ut\",\n  \"startDate\": \"sunt in sed veniam\",\n  \"endDate\": \"adipisicing aliquip enim\",\n  \"tech\": [\n    \"eiusmod ullamco sunt laboris\",\n    \"do sed officia mollit\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts"
							]
						},
						"description": "Add a new contract with fields"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Update missing contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "-1",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Delete missing contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "-1",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "history",
			"item": [
				{
					"name": "Create new employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"pm.variables.set(\"employee_id\", res.id)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"test user\",\n  \"github\": \"testuser1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees"
							]
						},
						"description": "Add a new employee with given name and github username"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"consequat reprehenderit commodo ipsum\",\n  \"github\": \"cillum eiusmod do in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/employees",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -89659898,\n  \"name\": \"eiusmod sed ullamco\",\n  \"github\": \"amet nostrud sed fugiat\"\n}"
						}
					]
				},
				{
					"name": "Create new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"pm.variables.set(\"client_id\", res.id)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Add a new client with given name and url"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"l\",\n  \"url\": \"elit est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -53115082,\n  \"name\": \"occaecat veniam in\",\n  \"url\": \"aliquip ad ips\"\n}"
						}
					]
				},
				{
					"name": "Create new contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"pm.variables.set(\"contract_id\", res.id)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{client_id}},\n  \"type\": \"cillum ut\",\n  \"startDate\": \"sunt in sed veniam\",\n  \"endDate\": \"adipisicing aliquip enim\",\n  \"tech\": [\n    \"eiusmod ullamco sunt laboris\",\n    \"do sed officia mollit\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts"
							]
						},
						"description": "Add a new contract with fields"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 42598630,\n  \"type\": \"eu non aliqua\",\n  \"startDate\": \"Duis\",\n  \"endDate\": \"laboris mollit reprehenderit exercitation\",\n  \"tech\": [\n    \"ullamco no\",\n    \"dol\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Create new history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"pm.variables.set(\"history_id\", res.id)",
									"pm.variables.set(\"role\", req.role)",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain id, clientId, contractId, employeeId and role fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"contractId\", \"clientName\", \"employeeId\", \"employeeName\", \"role\");",
									"});",
									"",
									"pm.test(\"response should have correct name and url\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", req.clientId)",
									"    pm.expect(res).to.have.property(\"contractId\", req.contractId)",
									"    pm.expect(res).to.have.property(\"employeeId\", req.employeeId)",
									"    pm.expect(res).to.have.property(\"role\", req.role)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{client_id}},\n  \"contractId\": {{contract_id}},\n  \"employeeId\": {{employee_id}},\n  \"role\": \"esse aute eu\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history"
							]
						},
						"description": "Add a new contract assignment with fields"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 86591876,\n  \"contractId\": -49284731,\n  \"employeeId\": -44035271,\n  \"role\": \"esse aute eu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 30062128,\n  \"clientId\": -33215485,\n  \"contractId\": 26941713,\n  \"employeeId\": 81088068,\n  \"clientName\": \"nostrud mol\",\n  \"employeeName\": \"ipsum Lorem labore consectetur\",\n  \"role\": \"et commodo consectetur dolore\"\n}"
						}
					]
				},
				{
					"name": "Get new history by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let contractId = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let employeeId = pm.variables.get(\"employee_id\")",
									"let role = pm.variables.get(\"role\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain id, clientId, contractId, employeeId and role fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"contractId\", \"clientName\", \"employeeId\", \"employeeName\", \"role\");",
									"});",
									"",
									"pm.test(\"response should have correct id name and url\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", clientId)",
									"    pm.expect(res).to.have.property(\"contractId\", contractId)",
									"    pm.expect(res).to.have.property(\"employeeId\", employeeId)",
									"    pm.expect(res).to.have.property(\"role\", role)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "{{history_id}}",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 30062128,\n  \"clientId\": -33215485,\n  \"contractId\": 26941713,\n  \"employeeId\": 81088068,\n  \"clientName\": \"nostrud mol\",\n  \"employeeName\": \"ipsum Lorem labore consectetur\",\n  \"role\": \"et commodo consectetur dolore\"\n}"
						}
					]
				},
				{
					"name": "Get all history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"history_id\")",
									"let contractId = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let employeeId = pm.variables.get(\"employee_id\")",
									"let role = pm.variables.get(\"role\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test history\", function () {",
									"    let entry = res.filter(history=> history?.id == id)[0]",
									"    pm.expect(entry, \"get all response missing test user\").to.exist",
									"    pm.expect(entry).to.have.property(\"clientId\", clientId)",
									"    pm.expect(entry).to.have.property(\"contractId\", contractId)",
									"    pm.expect(entry).to.have.property(\"employeeId\", employeeId)",
									"    pm.expect(entry).to.have.property(\"role\", role)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/history?employeeId={{employee_id}}&clientId={{client_id}}&contractId={{contract_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "numerical employee identifier"
								},
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "numerical client identifier"
								},
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "numerical contract identifier"
								}
							]
						},
						"description": "Retrieves all employee contract assignment history"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history?employeeId=-10462160&clientId=-10462160&contractId=-10462160",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "-10462160"
										},
										{
											"key": "clientId",
											"value": "-10462160"
										},
										{
											"key": "contractId",
											"value": "-10462160"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -10907666,\n    \"clientId\": -59576906,\n    \"contractId\": -138254,\n    \"employeeId\": -14808265,\n    \"clientName\": \"velit Ut elit esse\",\n    \"employeeName\": \"irure\",\n    \"role\": \"et irure magna\"\n  },\n  {\n    \"id\": 30323533,\n    \"clientId\": -81181440,\n    \"contractId\": -88506875,\n    \"employeeId\": 33020878,\n    \"clientName\": \"sit sunt laborum reprehenderit\",\n    \"employeeName\": \"mollit occaecat enim exercitation in\",\n    \"role\": \"in sunt ipsum\"\n  }\n]"
						}
					]
				},
				{
					"name": "Illegal update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 10000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "{{history_id}}",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 86591876,\n  \"contractId\": -49284731,\n  \"employeeId\": -44035271,\n  \"role\": \"esse aute eu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Update history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let req = JSON.parse(pm.request.body.raw)",
									"let id = pm.variables.get(\"history_id\")",
									"",
									"pm.variables.set(\"orig_contract_id\", pm.variables.get(\"contract_id\"))",
									"pm.variables.set(\"orig_client_id\", pm.variables.get(\"client_id\"))",
									"pm.variables.set(\"orig_employee_id\", pm.variables.get(\"employee_id\"))",
									"",
									"pm.variables.set(\"contract_id\", req.contractId)",
									"pm.variables.set(\"client_id\", req.clientId)",
									"pm.variables.set(\"employee_id\", req.employeeId)",
									"pm.variables.set(\"role\", req.role)",
									"",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain id, clientId, contractId, employeeId and role fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"contractId\", \"clientName\", \"employeeId\", \"employeeName\", \"role\");",
									"});",
									"",
									"pm.test(\"response should have updated name and url\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", req.clientId)",
									"    pm.expect(res).to.have.property(\"contractId\", req.contractId)",
									"    pm.expect(res).to.have.property(\"employeeId\", req.employeeId)",
									"    pm.expect(res).to.have.property(\"role\", req.role)",
									"    pm.expect(res).to.have.property(\"id\", id)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": 86591876,\n  \"contractId\": -49284731,\n  \"employeeId\": -44035271,\n  \"role\": \"esse aute eu\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "{{history_id}}",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 86591876,\n  \"contractId\": -49284731,\n  \"employeeId\": -44035271,\n  \"role\": \"esse aute eu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Get updated history by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let contractId = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let employeeId = pm.variables.get(\"employee_id\")",
									"let role = pm.variables.get(\"role\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response body should contain id, clientId, contractId, employeeId and role fields\", function () {",
									"    pm.expect(res).to.have.all.keys(\"id\", \"clientId\", \"contractId\", \"clientName\", \"employeeId\", \"employeeName\", \"role\");",
									"});",
									"",
									"pm.test(\"response should have correct id name and url\", function() {",
									"    pm.expect(res).to.have.property(\"clientId\", clientId)",
									"    pm.expect(res).to.have.property(\"contractId\", contractId)",
									"    pm.expect(res).to.have.property(\"employeeId\", employeeId)",
									"    pm.expect(res).to.have.property(\"role\", role)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "{{history_id}}",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 30062128,\n  \"clientId\": -33215485,\n  \"contractId\": 26941713,\n  \"employeeId\": 81088068,\n  \"clientName\": \"nostrud mol\",\n  \"employeeName\": \"ipsum Lorem labore consectetur\",\n  \"role\": \"et commodo consectetur dolore\"\n}"
						}
					]
				},
				{
					"name": "Get all history post update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"history_id\")",
									"let contractId = pm.variables.get(\"contract_id\")",
									"let clientId = pm.variables.get(\"client_id\")",
									"let employeeId = pm.variables.get(\"employee_id\")",
									"let role = pm.variables.get(\"role\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must contain test history\", function () {",
									"    let entry = res.filter(history=> history?.id == id)[0]",
									"    pm.expect(entry, \"get all response missing test user\").to.exist",
									"    pm.expect(entry).to.have.property(\"clientId\", clientId)",
									"    pm.expect(entry).to.have.property(\"contractId\", contractId)",
									"    pm.expect(entry).to.have.property(\"employeeId\", employeeId)",
									"    pm.expect(entry).to.have.property(\"role\", role)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/history?employeeId={{employee_id}}&clientId={{client_id}}&contractId={{contract_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "numerical employee identifier"
								},
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "numerical client identifier"
								},
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "numerical contract identifier"
								}
							]
						},
						"description": "Retrieves all employee contract assignment history"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history?employeeId=-10462160&clientId=-10462160&contractId=-10462160",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "-10462160"
										},
										{
											"key": "clientId",
											"value": "-10462160"
										},
										{
											"key": "contractId",
											"value": "-10462160"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -10907666,\n    \"clientId\": -59576906,\n    \"contractId\": -138254,\n    \"employeeId\": -14808265,\n    \"clientName\": \"velit Ut elit esse\",\n    \"employeeName\": \"irure\",\n    \"role\": \"et irure magna\"\n  },\n  {\n    \"id\": 30323533,\n    \"clientId\": -81181440,\n    \"contractId\": -88506875,\n    \"employeeId\": 33020878,\n    \"clientName\": \"sit sunt laborum reprehenderit\",\n    \"employeeName\": \"mollit occaecat enim exercitation in\",\n    \"role\": \"in sunt ipsum\"\n  }\n]"
						}
					]
				},
				{
					"name": "Delete history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must have OK status\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "{{history_id}}",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get history by ID post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "{{history_id}}",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 30062128,\n  \"clientId\": -33215485,\n  \"contractId\": 26941713,\n  \"employeeId\": 81088068,\n  \"clientName\": \"nostrud mol\",\n  \"employeeName\": \"ipsum Lorem labore consectetur\",\n  \"role\": \"et commodo consectetur dolore\"\n}"
						}
					]
				},
				{
					"name": "Get all history post delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json()",
									"let id = pm.variables.get(\"history_id\")",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response must not contain test history\", function () {",
									"    let entry = res.filter(history => history?.id == id)[0]",
									"    pm.expect(entry, \"get all response contains test history after deletion\").to.be.undefined",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/history?employeeId={{employee_id}}&clientId={{client_id}}&contractId={{contract_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "{{employee_id}}",
									"description": "numerical employee identifier"
								},
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"description": "numerical client identifier"
								},
								{
									"key": "contractId",
									"value": "{{contract_id}}",
									"description": "numerical contract identifier"
								}
							]
						},
						"description": "Retrieves all employee contract assignment history"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history?employeeId=-10462160&clientId=-10462160&contractId=-10462160",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "-10462160"
										},
										{
											"key": "clientId",
											"value": "-10462160"
										},
										{
											"key": "contractId",
											"value": "-10462160"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -10907666,\n    \"clientId\": -59576906,\n    \"contractId\": -138254,\n    \"employeeId\": -14808265,\n    \"clientName\": \"velit Ut elit esse\",\n    \"employeeName\": \"irure\",\n    \"role\": \"et irure magna\"\n  },\n  {\n    \"id\": 30323533,\n    \"clientId\": -81181440,\n    \"contractId\": -88506875,\n    \"employeeId\": 33020878,\n    \"clientName\": \"sit sunt laborum reprehenderit\",\n    \"employeeName\": \"mollit occaecat enim exercitation in\",\n    \"role\": \"in sunt ipsum\"\n  }\n]"
						}
					]
				},
				{
					"name": "Delete contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must have OK status\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/contracts/:contractId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracts",
								":contractId"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "{{orig_contract_id}}",
									"description": "(Required) Numeric ID of the contract"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/contracts/:contractId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracts",
										":contractId"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the contract"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must have OK status\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "{{orig_client_id}}",
									"description": "(Required) Numeric ID of the client"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the client"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must have OK status\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/employees/:employeeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employees",
								":employeeId"
							],
							"variable": [
								{
									"key": "employeeId",
									"value": "{{orig_employee_id}}",
									"description": "(Required) Numeric ID of the employee"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/employees/:employeeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"employees",
										":employeeId"
									],
									"variable": [
										{
											"key": "employeeId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create bad history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": -1,\n  \"contractId\": -1,\n  \"employeeId\": -1,\n  \"role\": \"esse aute eu\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history"
							]
						},
						"description": "Add a new contract assignment with fields"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 86591876,\n  \"contractId\": -49284731,\n  \"employeeId\": -44035271,\n  \"role\": \"esse aute eu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 30062128,\n  \"clientId\": -33215485,\n  \"contractId\": 26941713,\n  \"employeeId\": 81088068,\n  \"clientName\": \"nostrud mol\",\n  \"employeeName\": \"ipsum Lorem labore consectetur\",\n  \"role\": \"et commodo consectetur dolore\"\n}"
						}
					]
				},
				{
					"name": "Update missing history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": 86591876,\n  \"contractId\": -49284731,\n  \"employeeId\": -44035271,\n  \"role\": \"esse aute eu\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "-1",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": 86591876,\n  \"contractId\": -49284731,\n  \"employeeId\": -44035271,\n  \"role\": \"esse aute eu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60346319,\n  \"clientId\": 82878896,\n  \"type\": \"enim laboris Duis comm\",\n  \"startDate\": \"in anim consectetur dolor\",\n  \"endDate\": \"irure in\",\n  \"tech\": [\n    \"irure non consectetur anim\",\n    \"officia nulla Lorem in esse\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Delete missing history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should return a 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history/:historyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":historyId"
							],
							"variable": [
								{
									"key": "historyId",
									"value": "-1",
									"description": "(Required) Numeric ID of the employee contract assignment"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/history/:historyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"history",
										":historyId"
									],
									"variable": [
										{
											"key": "historyId",
											"value": "-10462160",
											"description": "(Required) Numeric ID of the employee contract assignment"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/",
			"type": "string"
		}
	]
}